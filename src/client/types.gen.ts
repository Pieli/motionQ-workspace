// This file is auto-generated by @hey-api/openapi-ts

export type Composition = {
    id: string;
    /**
     * Reference to the React component type
     */
    name: string;
    props: {
        [key: string]: unknown;
    };
    duration: number;
    background?: Composition;
};

export type UserResponse = {
    /**
     * MongoDB ObjectId
     */
    id: string;
    /**
     * User email address
     */
    email: string;
    /**
     * Email verification status
     */
    isVerified: boolean;
    /**
     * Account creation timestamp
     */
    createdAt: string;
};

export type CreatedUser = {
    /**
     * MongoDB ObjectId
     */
    userId: string;
};

export type PublicUser = {
    /**
     * MongoDB ObjectId
     */
    _id: string;
    /**
     * User display name
     */
    displayName: string;
    /**
     * Email verification status
     */
    isVerified: boolean;
    /**
     * User's payment tier
     */
    paymentTier: 'free' | 'basic' | 'pro' | 'enterprise';
    /**
     * Account creation timestamp
     */
    createdAt: string;
};

export type UserCreateRequest = {
    /**
     * Updated email address
     */
    email: string;
};

export type Credits = {
    /**
     * Current available credits
     */
    current: number;
    /**
     * Monthly credit allowance
     */
    monthly: number;
    /**
     * Last monthly reset timestamp
     */
    lastReset: string;
    /**
     * Recent credit transactions
     */
    transactions: Array<CreditTransaction>;
};

export type UserCredits = {
    credits: Credits;
    tier: PaymentTier;
    usage: UsageStats;
};

export type CreditTransaction = {
    /**
     * MongoDB ObjectId
     */
    _id: string;
    /**
     * User ID (MongoDB ObjectId)
     */
    userId: string;
    /**
     * Credit amount (negative for deduction, positive for addition)
     */
    amount: number;
    /**
     * Type of operation
     */
    operation: 'generate_animation' | 'export_hd_video' | 'export_4k_video' | 'export_8k_video' | 'ai_chat_message' | 'asset_upload' | 'composition_save' | 'monthly_reset' | 'purchase';
    /**
     * Human-readable description of the transaction
     */
    description: string;
    /**
     * Additional transaction metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * Transaction timestamp
     */
    createdAt: string;
};

export type PaymentTier = {
    /**
     * Tier name
     */
    name: 'free' | 'basic' | 'pro' | 'enterprise';
    /**
     * Monthly credit allowance
     */
    monthlyCredits: number;
    /**
     * Monthly price in USD
     */
    price: number;
    /**
     * List of tier features
     */
    features: Array<string>;
};

export type UsageStats = {
    currentMonth: {
        /**
         * Credits used this month
         */
        used: number;
        /**
         * Credits remaining this month
         */
        remaining: number;
    };
    lastMonth: {
        /**
         * Credits used last month
         */
        used: number;
        /**
         * Total credits available last month
         */
        total: number;
    };
    /**
     * Most frequently used operations
     */
    topOperations: Array<{
        operation: string;
        count: number;
        creditsUsed: number;
    }>;
};

export type Project = {
    /**
     * Project ID
     */
    id: string;
    /**
     * Owner user ID (MongoDB ObjectId)
     */
    userId: string;
    /**
     * thumbnail for the project
     */
    thumbnail?: string;
    /**
     * Project name
     */
    name: string;
    /**
     * Project description
     */
    description?: string;
    metadata: ProjectMetadata;
    /**
     * AI chat conversation history
     */
    chatHistory: Array<ChatMessage>;
    /**
     * Project color scheme
     */
    colorScheme?: {
        [key: string]: unknown;
    };
    assets: ProjectAssets;
    /**
     * Animation compositions
     */
    compositions: Array<Composition>;
    /**
     * Exported video files
     */
    exportedVideos: Array<ExportedVideo>;
    /**
     * Project settings
     */
    settings?: {
        [key: string]: unknown;
    };
};

export type ProjectMetadata = {
    createdAt: string;
    updatedAt: string;
    lastAccessed: string;
    status: 'draft' | 'active' | 'completed' | 'archived';
    tags: Array<string>;
};

export type ProjectAssets = {
    images: Array<Asset>;
    videos: Array<Asset>;
    audio: Array<Asset>;
    fonts: Array<Asset>;
    other: Array<Asset>;
};

export type Asset = {
    /**
     * Asset ID
     */
    id: string;
    /**
     * Asset filename
     */
    name: string;
    /**
     * Asset MIME type
     */
    type: string;
    /**
     * File size in bytes
     */
    size: number;
    /**
     * Asset URL
     */
    url: string;
    uploadedAt: string;
};

export type CreateChatMessage = {
    /**
     * Message sender role
     */
    role: 'user' | 'agent';
    /**
     * Message content
     */
    content: string;
};

export type ChatMessage = {
    /**
     * Message ID
     */
    id: string;
    /**
     * Message sender role
     */
    role: 'user' | 'agent';
    /**
     * Message content
     */
    content: string;
    timestamp: string;
    /**
     * Additional message metadata
     */
    metadata?: {
        [key: string]: unknown;
    };
};

export type ExportedVideo = {
    /**
     * Export ID
     */
    id: string;
    /**
     * Video quality
     */
    quality: 'HD' | '4K' | '8K';
    /**
     * Video format
     */
    format: string;
    /**
     * Download URL
     */
    url: string;
    /**
     * File size in bytes
     */
    size: number;
    /**
     * Video duration in seconds
     */
    duration: number;
    /**
     * Credits consumed for this export
     */
    creditsUsed: number;
    exportedAt: string;
};

export type _Error = {
    /**
     * Error type or category
     */
    error: string;
    /**
     * Human-readable error message
     */
    message: string;
    /**
     * Unique request identifier for tracking
     */
    requestId?: string;
};

/**
 * Project ID (MongoDB ObjectId)
 */
export type ProjectIdParam = string;

export type GetApiUsersMeProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/me/projects';
};

export type GetApiUsersMeProjectsErrors = {
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiUsersMeProjectsError = GetApiUsersMeProjectsErrors[keyof GetApiUsersMeProjectsErrors];

export type GetApiUsersMeProjectsResponses = {
    /**
     * List of projects
     */
    200: Array<Project>;
};

export type GetApiUsersMeProjectsResponse = GetApiUsersMeProjectsResponses[keyof GetApiUsersMeProjectsResponses];

export type PostApiUsersMeProjectsData = {
    body: {
        name: string;
    };
    path?: never;
    query?: never;
    url: '/api/users/me/projects';
};

export type PostApiUsersMeProjectsErrors = {
    /**
     * Bad request - invalid input data
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiUsersMeProjectsError = PostApiUsersMeProjectsErrors[keyof PostApiUsersMeProjectsErrors];

export type PostApiUsersMeProjectsResponses = {
    /**
     * Project created
     */
    201: Project;
};

export type PostApiUsersMeProjectsResponse = PostApiUsersMeProjectsResponses[keyof PostApiUsersMeProjectsResponses];

export type DeleteApiUsersMeProjectsByProjectIdData = {
    body?: never;
    path: {
        /**
         * Project ID (MongoDB ObjectId)
         */
        projectId: string;
    };
    query?: never;
    url: '/api/users/me/projects/{projectId}';
};

export type DeleteApiUsersMeProjectsByProjectIdErrors = {
    /**
     * Bad request - invalid input data
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteApiUsersMeProjectsByProjectIdError = DeleteApiUsersMeProjectsByProjectIdErrors[keyof DeleteApiUsersMeProjectsByProjectIdErrors];

export type DeleteApiUsersMeProjectsByProjectIdResponses = {
    /**
     * Project deleted
     */
    204: void;
};

export type DeleteApiUsersMeProjectsByProjectIdResponse = DeleteApiUsersMeProjectsByProjectIdResponses[keyof DeleteApiUsersMeProjectsByProjectIdResponses];

export type GetApiUsersMeProjectsByProjectIdData = {
    body?: never;
    path: {
        /**
         * Project ID (MongoDB ObjectId)
         */
        projectId: string;
    };
    query?: never;
    url: '/api/users/me/projects/{projectId}';
};

export type GetApiUsersMeProjectsByProjectIdErrors = {
    /**
     * Bad request - invalid input data
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiUsersMeProjectsByProjectIdError = GetApiUsersMeProjectsByProjectIdErrors[keyof GetApiUsersMeProjectsByProjectIdErrors];

export type GetApiUsersMeProjectsByProjectIdResponses = {
    /**
     * Project details
     */
    200: Project;
};

export type GetApiUsersMeProjectsByProjectIdResponse = GetApiUsersMeProjectsByProjectIdResponses[keyof GetApiUsersMeProjectsByProjectIdResponses];

export type PutApiUsersMeProjectsByProjectIdData = {
    body: {
        compositions?: Array<Composition>;
    };
    path: {
        /**
         * Project ID (MongoDB ObjectId)
         */
        projectId: string;
    };
    query?: never;
    url: '/api/users/me/projects/{projectId}';
};

export type PutApiUsersMeProjectsByProjectIdErrors = {
    /**
     * Bad request - invalid input data
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PutApiUsersMeProjectsByProjectIdError = PutApiUsersMeProjectsByProjectIdErrors[keyof PutApiUsersMeProjectsByProjectIdErrors];

export type PutApiUsersMeProjectsByProjectIdResponses = {
    /**
     * Project updated
     */
    200: Project;
};

export type PutApiUsersMeProjectsByProjectIdResponse = PutApiUsersMeProjectsByProjectIdResponses[keyof PutApiUsersMeProjectsByProjectIdResponses];

export type PutApiUsersMeProjectsByProjectIdCompositionsData = {
    body: {
        compositions?: Array<Composition>;
    };
    path: {
        /**
         * Project ID (MongoDB ObjectId)
         */
        projectId: string;
    };
    query?: never;
    url: '/api/users/me/projects/{projectId}/compositions';
};

export type PutApiUsersMeProjectsByProjectIdCompositionsErrors = {
    /**
     * Bad request - invalid input data
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PutApiUsersMeProjectsByProjectIdCompositionsError = PutApiUsersMeProjectsByProjectIdCompositionsErrors[keyof PutApiUsersMeProjectsByProjectIdCompositionsErrors];

export type PutApiUsersMeProjectsByProjectIdCompositionsResponses = {
    /**
     * Project updated
     */
    200: Project;
};

export type PutApiUsersMeProjectsByProjectIdCompositionsResponse = PutApiUsersMeProjectsByProjectIdCompositionsResponses[keyof PutApiUsersMeProjectsByProjectIdCompositionsResponses];

export type PostApiUsersMeProjectsByProjectIdChatData = {
    body: CreateChatMessage;
    path: {
        /**
         * Project ID (MongoDB ObjectId)
         */
        projectId: string;
    };
    query?: never;
    url: '/api/users/me/projects/{projectId}/chat';
};

export type PostApiUsersMeProjectsByProjectIdChatErrors = {
    /**
     * Bad request - invalid input data
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiUsersMeProjectsByProjectIdChatError = PostApiUsersMeProjectsByProjectIdChatErrors[keyof PostApiUsersMeProjectsByProjectIdChatErrors];

export type PostApiUsersMeProjectsByProjectIdChatResponses = {
    /**
     * Message added to chat history
     */
    200: ChatMessage;
};

export type PostApiUsersMeProjectsByProjectIdChatResponse = PostApiUsersMeProjectsByProjectIdChatResponses[keyof PostApiUsersMeProjectsByProjectIdChatResponses];

export type PostApiUsersData = {
    body: UserCreateRequest;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type PostApiUsersErrors = {
    /**
     * Bad request - invalid input data
     */
    400: _Error;
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiUsersError = PostApiUsersErrors[keyof PostApiUsersErrors];

export type PostApiUsersResponses = {
    /**
     * User profile created successfully
     */
    200: CreatedUser;
};

export type PostApiUsersResponse = PostApiUsersResponses[keyof PostApiUsersResponses];

export type GetApiUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/me';
};

export type GetApiUsersMeErrors = {
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiUsersMeError = GetApiUsersMeErrors[keyof GetApiUsersMeErrors];

export type GetApiUsersMeResponses = {
    /**
     * User profile retrieved successfully
     */
    200: UserResponse;
};

export type GetApiUsersMeResponse = GetApiUsersMeResponses[keyof GetApiUsersMeResponses];

export type GetApiUsersMeCreditData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/me/credit';
};

export type GetApiUsersMeCreditErrors = {
    /**
     * Unauthorized - invalid or missing authentication token
     */
    401: _Error;
    /**
     * Resource not found
     */
    404: _Error;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiUsersMeCreditError = GetApiUsersMeCreditErrors[keyof GetApiUsersMeCreditErrors];

export type GetApiUsersMeCreditResponses = {
    /**
     * User credit information retrieved successfully
     */
    200: UserCredits;
};

export type GetApiUsersMeCreditResponse = GetApiUsersMeCreditResponses[keyof GetApiUsersMeCreditResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | 'http://server-production-b67f.up.railway.app' | (string & {});
};